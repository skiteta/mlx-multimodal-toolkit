[project]
name = "mlx-multimodal-toolkit"
version = "0.1.0"
description = "A unified toolkit for LLMs, VLMs, and ALMs using MLX framework on Apple Silicon"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["mlx", "llm", "vlm", "alm", "multimodal", "apple-silicon", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "mlx>=0.18.0",
    "mlx-lm>=0.17.0",
    "mlx-vlm>=0.0.7",
    "mlx-whisper>=0.1.0",
    "numpy>=1.24.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "tokenizers>=0.13.0",
    "Pillow>=9.0.0",
    "pyyaml>=6.0",
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "huggingface-hub>=0.16.0",
    "accelerate>=0.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/mlx-multimodal-toolkit"
Documentation = "https://github.com/yourusername/mlx-multimodal-toolkit#readme"
Repository = "https://github.com/yourusername/mlx-multimodal-toolkit"
Issues = "https://github.com/yourusername/mlx-multimodal-toolkit/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py39"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--capture=no",
    "-vv",
]